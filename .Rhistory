<<<<<<< HEAD
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
=======
#   mutate(value = paste0(ess_website, value))
country_available <- country %in% cnts
index_country <- country == cnts
available_link <- web_try[index_country]
country_link <- all_sddf[index_country]
if (country_available &&  country_link == "") {
stop(country, " doesn't have weight data for round ", rounds)
}
format_urls <-
map_chr(country_link, grab_link, ess_website = ess_website) %>%
paste0(ess_website, .)
sddf_data <-
essurvey:::round_downloader(
format_urls,
country,
tempdir()
) %>%
dirname() %>%
read_format_data(format = 'stata', rounds = rounds)
sddf_data
country <- "Denmark"
email <- "cimentadaj@gmail.com"
#### Functions
# Safe getter
safe_GET <- function(url, config = list(), ...) {
httr::stop_for_status(httr::GET(url = url, config = config, ...))
}
subscript_error_handler <- function(expr, fill_with, ...) {
res <- tryCatch(expr = expr,
error = function(e) return(fill_with),
...)
res
}
grab_link <- function(link, ess_website, format = "stata") {
download_page <- safe_GET(paste0(ess_website, link))
html_ess <- xml2::read_html(download_page)
z <- xml2::xml_text(xml2::xml_find_all(html_ess, "//a/@href"))
z[grep(format, z)]
}
authenticate_ess <- function (ess_email, ess_website, path_login) {
if (missing(ess_email)) {
stop("`ess_email` parameter must be specified. Create an account at https://www.europeansocialsurvey.org/user/new")
}
values <- list(u = ess_email)
url_login <- paste0(ess_website, path_login)
authen <- httr::POST(url_login, body = values)
check_authen <- safe_GET(url_login, query = values)
authen_xml <- xml2::read_html(check_authen)
error_node <- xml2::xml_find_all(authen_xml, "//p [@class=\"error\"]")
if (length(error_node) != 0) {
stop(xml2::xml_text(error_node), " Create an account at https://www.europeansocialsurvey.org/user/new")
}
}
read_format_data <- function (urls, format, rounds) {
format_read <- switch(format, spss = haven::read_spss, stata = haven::read_dta)
format_ext <- c(".dta", ".sav")
format_dirs <- list.files(urls, pattern = paste0(format_ext,
"$", collapse = "|"), full.names = TRUE)
dataset <- lapply(format_dirs, format_read)
unlink(format_dirs, recursive = TRUE, force = TRUE)
if (length(rounds) == 1)
dataset <- dataset[[1]]
dataset
}
####
if (!rounds %in% show_rounds()) {
stop(rounds, " is not a valid round.")
}
if (!country %in% show_countries()) {
stop(country, " is not a available in ESS round ", rounds)
}
## Links
ess_website <- "http://www.europeansocialsurvey.org"
ess_url <- paste0(ess_website, "/data/download.html?r=")
path_login <- "/user/login"
final_url <- paste0(ess_url, rounds)
##
## Authenticate in ESS website
authenticate_ess(email, ess_website, path_login)
###
cnts <-
final_url %>%
read_html() %>%
xml_find_all(xpath = "//h4") %>%
xml_text()
web_try <-
final_url %>%
read_html() %>%
xml_find_all(xpath = "//div[@class='round_files']//ul") %>%
as_list()
all_sddf <-
map_chr(seq_along(web_try), ~ {
grab_list_link <-
subscript_error_handler(
transpose(web_try[[.x]])[[1]][[5]],
structure(list(""), href = "")
>>>>>>> c75c8fd48c49f78a41538c679a2530041ffffcb2
)
}
})
country <- "Albania"
source("download_sddf.R")
ess6_svydesign <-
sapply(svyinfo, function(x) {
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria","Albania")) {
return(NULL)
} else{
print(country)
source("download_sddf.R")
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
~ 1
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
})
for(i in 1:length(svyinfo)){
x <- svyinfo[[i]]
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria","Albania")) {
return(NULL)
} else{
print(country)
source("download_sddf.R")
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
~ 1
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
}
for(i in 1:length(svyinfo)){
x <- svyinfo[[i]]
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria","Albania")) {
next
} else{
print(country)
source("download_sddf.R")
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
~ 1
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
}
str
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
sddf_data
"stratify"%in%names(x)
x$stratex1 == "yes"
sta
str
sddf_data$prob
sddf_data
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
for(i in 1:length(svyinfo)){
x <- svyinfo[[i]]
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria","Albania")) {
next
} else{
print(country)
source("download_sddf.R")
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
NULL
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
}
sddf_data
str
sta
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
sta
sddf_data$idno
is.na(sddf_data$idno)
any(is.na(sddf_data$idno))
which(is.na(sddf_data$idno))
sddf_data$idno
sddf_data$idno
sddf_data[which(is.na(sddf_data$idno)),]
sddf_data[which(is.na(sddf_data$idno)),]
tail(sddf_data[which(is.na(sddf_data$idno)),])
sddf_data
country
sddf_data %<>%
filter(!is.na(indo))
library(magrittr)
sddf_data %<>%
filter(!is.na(indo))
sddf_data %<>%
filter(!is.na(.$indo))
sddf_data %>%
filter(!is.na(.$indo))
tail(sddf_data[which(is.na(sddf_data$idno)),])
sddf_data %>%
filter(.,!is.na(.$indo))
sddf_data %>%
filter(.,!is.na(indo))
sddf_data %>%
filter(.,!is.na(.$indo))
sddf_data %>%
filter(!is.na(idno))
sddf_data %<>%
filter(!is.na(idno))
for(i in 1:length(svyinfo)){
x <- svyinfo[[i]]
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria","Albania")) {
next
} else{
print(country)
source("download_sddf.R")
if(country == "Denmark"){
sddf_data %<>%
filter(!is.na(idno))
}
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
NULL
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
}
sddf_data
sddf_data$stratify
is.na(sddf_data$stratify)
sum(is.na(sddf_data$stratify))
sum(sddf_data$stratify=="NA")
table(sddf_data$psu)
table(sddf_data$idno)
any(table(sddf_data$psu)>1)
which(table(sddf_data$psu)>1)
table(sddf_data$psu,sddf_data$stratify)
for(i in 1:length(svyinfo)){
x <- svyinfo[[i]]
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria","Albania")) {
next
} else{
print(country)
source("download_sddf.R")
if(country == "Denmark"){
sddf_data %<>%
filter(!is.na(idno))
}
if(country == "Iceland"){
#no stratification information in sddf
x$stratex1 <- "no"
}
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
NULL
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
}
source("download_sddf.R")
i
for(i in 15:length(svyinfo)){
x <- svyinfo[[i]]
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria","Albania","Israel")) {
#Israel doesn't have weight data for round 6
next
} else{
print(country)
source("download_sddf.R")
if(country == "Denmark"){
sddf_data %<>%
filter(!is.na(idno))
}
if(country == "Iceland"){
#no stratification information in sddf
x$stratex1 <- "no"
}
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
NULL
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
}
ess6_svydesign <-
sapply(svyinfo, function(x) {
# for(i in 1:length(svyinfo)){
#    x <- svyinfo[[i]]
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria","Albania","Israel")) {
#Israel doesn't have weight data for round 6
return(NULL)#next
} else{
print(country)
source("download_sddf.R")
if(country == "Denmark"){
sddf_data %<>%
filter(!is.na(idno))
}
if(country == "Iceland"){
#no stratification information in sddf
x$stratex1 <- "no"
}
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
NULL
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
}
)
ess6_svydesign <-
sapply(svyinfo, function(x) {
# for(i in 1:length(svyinfo)){
#    x <- svyinfo[[i]]
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria","Israel")) {
#Israel doesn't have weight data for round 6
return(NULL)#next
} else{
print(country)
source("download_sddf.R")
if(country == "Denmark"){
sddf_data %<>%
filter(!is.na(idno))
}
if(country == "Iceland"){
#no stratification information in sddf
x$stratex1 <- "no"
}
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
NULL
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
}
)
source('D:/Projects/sqp_ess_correction/download_sddf.R', echo=TRUE)
source('D:/Projects/sqp_ess_correction/download_sddf.R', echo=TRUE)
sddf_data <-
get.sddf(rounds = 6,country = "Albania",email="stefan.zins@gesis.org" )
sddf_data <-
get.sddf(rounds = 6,
country = "Austria",
email="stefan.zins@gesis.org")
library(magrittr)
# email   <- "stefan.zins@gesis.org"
# rounds  <- 6 # don't change this one yet!!
# country <- "Albania"
source("download_sddf.R")
#load sampling design information
read.csv2("svydesign_info_ESS6.csv") %>%
filter(domains %% 1 == 0) %>%
split(.,.$country) ->
svyinfo
ess6_svydesign <-
sapply(svyinfo, function(x) {
country <- as.character(x$country)
#skip Austria
if (country %in% c("Austria", "Israel")) {
#Austria: 'Error in dataset[[1]] : subscript out of bounds'
#Israel doesn't have weight data for round 6 in the SDDF
return(NULL)
} else {
print(country)
sddf_data <-
get.sddf(rounds = 6,
country = country,
email = "stefan.zins@gesis.org")
if (country == "Denmark") {
sddf_data %<>%
filter(!is.na(idno))
}
if (country == "Iceland") {
#no stratification information in sddf
x$stratex1 <- "no"
}
str <-
if (x$stratex1 == "yes") {
~ stratify
} else{
NULL
}
sta <-
if (x$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
})
#load sampling design information
read.csv2("svydesign_info_ESS6.csv") %>%
filter(domains %% 1 == 0) %>%
split(.,.$country) ->
svyinfo
mk_ess_svy  <- function(svyinfo,
rounds = 6,
email = "stefan.zins@gesis.org") {
country <- as.character(svyinfo$country)
#skip Austria
if (country %in% c("Austria", "Israel")) {
#Austria: 'Error in dataset[[1]] : subscript out of bounds'
#Israel doesn't have weight data for round 6 in the SDDF
return(NULL)
} else {
print(country)
sddf_data <-
<<<<<<< HEAD
get_sddf(rounds = rounds,
country = country,
email = email)
if (country == "Denmark") {
sddf_data %<>%
filter(!is.na(idno))
}
if (country == "Iceland") {
#no stratification information in sddf
svyinfo$stratex1 <- "no"
}
str <-
if (svyinfo$stratex1 == "yes") {
~ stratify
} else{
NULL
}
sta <-
if (svyinfo$stages > 1) {
~ psu + idno
} else{
~ idno
}
svydesign(
id = sta,
strata = str,
weights = 1 / sddf_data$prob,
data = sddf_data
)
}
}
ess6_svydesign <- sapply(svyinfo, mk_ess_svy)
# email   <- "stefan.zins@gesis.org"
# rounds  <- 6 # don't change this one yet!!
# country <- "Albania"
source("download_sddf.R")
ess6_svydesign <- sapply(svyinfo, mk_ess_svy)
# email   <- "stefan.zins@gesis.org"
# rounds  <- 6 # don't change this one yet!!
# country <- "Albania"
source("download_sddf.R")
ess6_svydesign <- sapply(svyinfo, mk_ess_svy)
=======
essurvey:::round_downloader(
format_urls,
country,
tempdir()
) %>%
dirname() %>%
read_format_data(format = 'stata', rounds = rounds)
# all ready
sddf_data
devtools::install_github("asqm/sqpr")
>>>>>>> c75c8fd48c49f78a41538c679a2530041ffffcb2
